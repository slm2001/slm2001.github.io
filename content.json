{"meta":{"title":"小明的Blog","subtitle":"每天一杯咖啡","description":"每周记得去打打球","author":"小明","url":"https://slm2001.github.io","root":"/"},"pages":[],"posts":[{"title":"TCP怎么保证传输的有效性","slug":"TCP怎么保证传输的有效性","date":"2023-03-21T09:05:01.000Z","updated":"2023-03-21T09:25:31.840Z","comments":true,"path":"2023/03/21/TCP怎么保证传输的有效性/","link":"","permalink":"https://slm2001.github.io/2023/03/21/TCP%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/","excerpt":"","text":"报文段基于数据块传输，数据块就是报文段 序列号保证不丢包，给每个包一个序列号，给包排序，去重。 校验和TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。 确认应答TCP 传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送 ACK 报文。这个 ACK 报文当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。 超时重传当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为已丢失，并进行重传。 流量控制TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。 拥塞控制当网络拥塞时，减少数据的发送。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://slm2001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"https://slm2001.github.io/tags/TCP/"}]},{"title":"MySQL索引","slug":"MySQL索引","date":"2023-03-21T08:44:12.000Z","updated":"2023-03-21T09:11:46.442Z","comments":true,"path":"2023/03/21/MySQL索引/","link":"","permalink":"https://slm2001.github.io/2023/03/21/MySQL%E7%B4%A2%E5%BC%95/","excerpt":"","text":"索引介绍索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。索引的作用就相当于书的目录。索引的底层数据结构存在很多类型，常见的索引结构有B树，B+树和Hash、红黑树。在MySQL中，InnoDB和MyISAM都是使用了B+树（平衡多路查找树）作为索引结构。 索引的优缺点优点：查询速度：使用索引可以大大加快数据的检索速度（大大减少检索的数据量），这也是创建索引的最主要的原因。唯一性：通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 缺点：时间：创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态修改，会降低SQL执行效率。空间：索引需要使用物理文件存储，也会耗费一定的空间。 索引的底层数据结构Hash表哈希表是键值对的集合，通过键（key）即可以快速取出对应的值（value），因此哈希表可以快速检索数据，接近O(1)。 B树、B+树B树也叫B-树，全称 多路平衡查找树，B+树是B树的一种变体。目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构 B树、B+树的异同B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和data，其他内节点只存放 key。B 树的叶子节点都是独立的，B+树的叶子节点有一条引用链指向与它相邻的叶子节点。B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是实现方式不太一样。MyISAM是非聚集索引，InnoDB是聚集索引，其余的是它辅助索引。 索引类型总结按照数据结构维度划分B+树索引：MySQL里默认和最常用的索引类型。只有叶子节点存储value，非叶子节点只有指针和key。哈希索引：类似键值的形式，一次即可定位。RTree索引、全文索引。 按照底层存储方式角度划分：聚集索引：索引结构和数据一起存放的索引，InnoDB中的主键索引就属于聚集索引。非聚集索引：索引结构和数据分开存放的索引，二级索引（辅助索引）就属于非聚集索引。MyISAM主键索引和非主键索引都用的是非聚集索引。 按照应用维度划分主键索引：加速查询+列值唯一（不可以有null）+表中只有一个普通索引：仅加速查询唯一索引：加速查询+列值唯一（可以有null）覆盖索引：一个索引包含所有需要查询的字段的值联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。 主键索引（Primary Key）数据表的主键列使用的就是主键索引。 二级索引（辅助索引）二级索引的叶子结点存储的data是主键，通过二级索引，可以定位主键的位置。唯一索引，普通索引，前缀索引等索引都属于二级索引。唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。 聚集索引和非聚集索引聚集索引聚集索引就是索引结构和数据一起存放的索引。InnoDB中的主键索引就属于聚集索引。非叶子节点存储索引，叶子结点存储索引和对应的数据。 聚集索引的优点查询速度非常快：因为B+树本身就是一颗多路平衡查找树，叶子节点都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚集索引，减少了一次读取数据的IO操作。对排序查找和范围查找优化：聚集索引对于主键的排序查找和范围查找速度非常快。 聚集索引的缺点依赖于有序的数据：不有序就要排序，就会很慢。更新代价大：索引列被修改，对应的索引也会被修改，叶子节点还放着数据的话修改起来更麻烦，所以对于主键索引来说，主键一般都是不可被修改的。 非聚集索引非聚集索引就是索引和数据分开存放的索引。二级索引（辅助索引）就属于非聚集索引。MySQL中的MyISAM不管是主键还是非主键，都是用非聚集索引的。非聚集索引的叶子节点不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。 非聚集索引的优点更新代价比较小，叶子节点不存放数据。 非聚集索引的缺点依赖于有序的数据：和聚集索引一样，都依赖于有序的数据。可能会二次查询（回表）：非聚集索引最大的缺点，当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。 覆盖索引和联合索引覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。 联合索引使用表中的多个字段创建索引，就是联合索引，也叫组合索引或复合索引。 最左前缀匹配原则在使用联合索引时，从左向右依次匹配查询条件，然后过滤数据，所以在使用联合索引时，将区分度高的字段放在最左边，这也可以过滤更多的数据。 索引下推索引下推是MySQL5.6版本中提供的一项索引优化功能，可以在非聚集索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。 索引失效的场景使用select *创建了组合索引，但查询条件未遵守最左匹配原则在索引列上进行计算、函数，类型转换等操作在查询中使用or，且or的前后条件中有一个字段没有索引，涉及的索引都不会被使用到","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://slm2001.github.io/categories/MySQL/"}],"tags":[{"name":"索引","slug":"索引","permalink":"https://slm2001.github.io/tags/%E7%B4%A2%E5%BC%95/"}]}],"categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://slm2001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"MySQL","slug":"MySQL","permalink":"https://slm2001.github.io/categories/MySQL/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"https://slm2001.github.io/tags/TCP/"},{"name":"索引","slug":"索引","permalink":"https://slm2001.github.io/tags/%E7%B4%A2%E5%BC%95/"}]}